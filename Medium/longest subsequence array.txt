int longestSuccessiveElements(vector<int>& a) {
    int longest = 1;                    // Initialize the variable to store the longest subsequence length to 1.
    int n = a.size();                   // Get the size of the input vector 'a'.
    unordered_set<int> st;              // Create an unordered set 'st' to store unique elements from the vector 'a'.

    // Insert all elements of vector 'a' into the unordered set 'st'.
    for (int i = 0; i < n; i++) {
        st.insert(a[i]);
    }

    // Loop through each unique element 'it' in the set 'st'.
    for (auto it : st) {
        // Check if 'it' is the start of a subsequence by looking for its predecessor.
        if (st.find(it - 1) == st.end()) {
            int count = 1;               // Initialize a counter to count the length of the current subsequence.
            int x = it;                  // Initialize a variable 'x' to hold the current element.

            // Keep incrementing 'x' and counting until the next element is found in the set.
            while (st.find(x + 1) != st.end()) {
                x = x + 1;
                count = count + 1;
            }

            longest = max(longest, count);  // Update the 'longest' value if the current subsequence is longer.
        }
    }

    return longest;                    // Return the length of the longest subsequence of successive elements.
}
