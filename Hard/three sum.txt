vector<vector<int>> triplet(int n, vector<int> &arr)
{
    vector<vector<int>> ans;
    sort(arr.begin(), arr.end()); // Sort the input array in ascending order

    for (int i = 0; i < n - 2; i++) {
        if (i > 0 && arr[i] == arr[i - 1]) {
            continue; // Skip duplicate elements to avoid duplicate triplets
        }

        int j = i + 1; // Initialize a left pointer
        int k = n - 1; // Initialize a right pointer

        while (j < k) { // Continue until left pointer is less than right pointer
            int sum = arr[i] + arr[j] + arr[k]; // Calculate the sum of three elements

            if (sum < 0) {
                j++; // Increment the left pointer if sum is less than zero
            } else if (sum > 0) {
                k--; // Decrement the right pointer if sum is greater than zero
            } else {
                // If sum is zero, we found a triplet
                vector<int> temp = {arr[i], arr[j], arr[k]}; // Create a triplet vector
                ans.push_back(temp); // Add the triplet to the answer vector

                // Move the pointers and skip duplicate elements
                j++;
                k--;
                while (j < k && arr[j] == arr[j - 1])
                    j++;
                while (j < k && arr[k] == arr[k + 1])
                    k--;
            }
        }
    }

    return ans; // Return the vector of unique triplets
}
